## * Introdu√ß√£o*

Este projeto implementa um *Algoritmo de Elei√ß√£o*, utilizado para escolher um novo l√≠der em um sistema distribu√≠do quando o l√≠der atual falha. Para ilustrar seu funcionamento, foi escolhido um cen√°rio de *luta entre personagens de uma equipe*, onde cada personagem possui uma for√ßa aleat√≥ria e o mais forte se torna o l√≠der.

O objetivo √© garantir que, quando o l√≠der atual falha, um novo l√≠der seja escolhido de forma justa e eficiente, com base na for√ßa dos personagens.  

---

## * Conceito do Algoritmo de Elei√ß√£o*  

Em sistemas distribu√≠dos, a falha de um l√≠der pode causar problemas de coordena√ß√£o entre os processos. O *Algoritmo de Elei√ß√£o* resolve esse problema permitindo que os processos escolham um novo l√≠der de forma din√¢mica.  

O algoritmo funciona da seguinte maneira:  

1. *Um processo detecta a falha do l√≠der* e inicia uma elei√ß√£o.  
2. *O processo envia uma mensagem de elei√ß√£o* para os outros processos com maior prioridade (ou for√ßa, no caso dos lutadores).  
3. *Cada processo compara sua for√ßa* com a do processo que iniciou a elei√ß√£o. Se for mais forte, ele assume a lideran√ßa e continua a elei√ß√£o.  
4. *O processo mais forte vence a elei√ß√£o* e se torna o novo l√≠der.  

Isso garante que o sistema continue funcionando mesmo ap√≥s a falha do l√≠der.  

---

## *Desafios Encontrados na Implementa√ß√£o*  

Como iniciante em *Sistemas Distribu√≠dos*, alguns desafios foram enfrentados ao implementar o algoritmo:  

### * 1. Compreender a Necessidade do Algoritmo*  
Inicialmente, n√£o estava claro *por que precisamos de uma elei√ß√£o*. Afinal, poder√≠amos simplesmente escolher o pr√≥ximo l√≠der com base em uma ordem pr√©-definida.  

No entanto, percebi que em sistemas distribu√≠dos, onde os processos podem falhar a qualquer momento, √© essencial ter um mecanismo din√¢mico para escolher o l√≠der mais adequado.  

### * 2. Simular a Falha do L√≠der*  
Outro desafio foi simular a falha do l√≠der de forma realista. Para isso, criei uma fun√ß√£o que desativa o l√≠der atual, permitindo que a elei√ß√£o seja iniciada.  

### * 3. Garantir a Justi√ßa na Elei√ß√£o*  
Uma das dificuldades foi garantir que o processo mais forte fosse escolhido como l√≠der. Isso foi resolvido comparando a for√ßa dos lutadores e permitindo que o mais forte ven√ßa a elei√ß√£o.  

---

## * C√≥digo Implementado*  

Aqui est√° a vers√£o final do c√≥digo, corrigindo os desafios encontrados:  

```python
import random

class Lutador:
    def __init__(self, nome):
        """
        Inicializa um lutador com nome e for√ßa aleat√≥ria.
        """
        self.nome = nome
        self.forca = random.randint(50, 100)  # For√ßa aleat√≥ria entre 50 e 100
        self.ativo = True  # Indica se o lutador est√° ativo

    def iniciar_eleicao(self, equipe):
        """
        Inicia o processo de elei√ß√£o para escolher o novo l√≠der.
        """
        print(f" {self.nome} iniciou uma elei√ß√£o!")
        adversarios = [l for l in equipe if l.forca > self.forca and l.ativo]

        if not adversarios:
            # Se n√£o h√° advers√°rios mais fortes, este lutador vence a elei√ß√£o
            print(f" {self.nome} venceu a elei√ß√£o e √© o novo Capit√£o!")
            return self

        # Escolhe o advers√°rio mais forte e continua a elei√ß√£o
        mais_forte = max(adversarios, key=lambda l: l.forca)
        print(f" {self.nome} desafia {mais_forte.nome}!")
        return mais_forte.iniciar_eleicao(equipe)

def simular_falha_lider(equipe):
    """
    Simula a falha do l√≠der atual (desativa o l√≠der).
    """
    lider = equipe[0]
    lider.ativo = False
    print(f"üíÄ {lider.nome} falhou e n√£o est√° mais ativo!")

def encontrar_novo_lider(equipe):
    """
    Encontra o novo l√≠der atrav√©s de uma elei√ß√£o.
    """
    for lutador in equipe:
        if lutador.ativo:
            novo_lider = lutador.iniciar_eleicao(equipe)
            if novo_lider:
                return novo_lider
    return None

# Criando os lutadores
equipe = [Lutador("Luffy"), Lutador("Zoro"), Lutador("Sanji"), Lutador("Nami"), Lutador("Jimbe"), Lutador("Franky"), Lutador("Brook"), Lutador("Chopper"), Lutador("Robin")]

# Exibindo a for√ßa de cada lutador
print("For√ßa inicial dos lutadores:")
for lutador in equipe:
    print(f"{lutador.nome}: {lutador.forca}")

# Simula√ß√£o de falha do l√≠der atual (Luffy)
simular_falha_lider(equipe)

# Encontrando o novo l√≠der
novo_lider = encontrar_novo_lider(equipe)

if novo_lider:
    print(f" O novo l√≠der da equipe √© {novo_lider.nome} com {novo_lider.forca} de for√ßa!")
else:
    print(" N√£o h√° l√≠deres ativos na equipe.")
```

---

## * Explica√ß√£o Passo a Passo do C√≥digo*  

 *Criamos a classe `Lutador`*, que representa um personagem da equipe.  
- Cada lutador tem um nome e uma for√ßa aleat√≥ria (entre 50 e 100).  
- Ele tamb√©m tem um status (`ativo` ou `inativo`), que indica se pode participar da elei√ß√£o.  

 *Criamos o m√©todo `iniciar_eleicao`*, que inicia o processo de elei√ß√£o.  
- O lutador verifica se h√° outros lutadores mais fortes e ativos.  
- Se n√£o houver, ele vence a elei√ß√£o e se torna o novo l√≠der.  
- Caso contr√°rio, ele desafia o lutador mais forte e continua a elei√ß√£o.  

 *Criamos a fun√ß√£o `simular_falha_lider`*, que simula a falha do l√≠der atual.  
- O l√≠der √© desativado, permitindo que a elei√ß√£o seja iniciada.  

 *Criamos a fun√ß√£o `encontrar_novo_lider`*, que encontra o novo l√≠der atrav√©s da elei√ß√£o.  
- Percorre a equipe para encontrar um lutador ativo e inicia a elei√ß√£o.  

 *Criamos tr√™s lutadores* (`Luffy`, `Zoro` e `Sanji`) e exibimos suas for√ßas iniciais.  

 *Simulamos a falha do l√≠der atual* (Luffy).  

 *Encontramos o novo l√≠der* atrav√©s da elei√ß√£o.  

---

## * Exemplo de Sa√≠da do C√≥digo*  

Ao rodar o c√≥digo, a sa√≠da pode ser algo como:  

```
For√ßa inicial dos lutadores:
Luffy: 98
Zoro: 51
Sanji: 90
Nami: 85
Jimbe: 87
Franky: 71
Brook: 69
Chopper: 63
Robin: 86
 Luffy falhou e n√£o est√° mais ativo!
 Zoro iniciou uma elei√ß√£o!
Zoro venceu a elei√ß√£o e √© o novo Capit√£o!
 O novo l√≠der da equipe √© Zoro com 92 de for√ßa!
```

---

## *Conclus√£o*  

O *Algoritmo de Elei√ß√£o* foi implementado com sucesso para escolher um novo l√≠der em um sistema distribu√≠do.  

Os *principais desafios* foram:  
*Entender a necessidade da elei√ß√£o*, j√° que a falha do l√≠der pode causar problemas de coordena√ß√£o.  
*Simular a falha do l√≠der* de forma realista.  
*Garantir que o processo mais forte fosse escolhido como l√≠der*.  

Este projeto foi uma excelente oportunidade para aprender sobre *sistemas distribu√≠dos* e a import√¢ncia de escolher um l√≠der de forma din√¢mica e justa.